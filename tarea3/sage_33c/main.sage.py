

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3)# Definir la variedad
M = Manifold(_sage_const_4 , 'R^4', start_index=_sage_const_1 )
# Definir las coordenadas
c_spher = M.chart(r't:(0,+oo) r:(0,+oo) th:(0,pi):\theta ph:(0,2*pi):\phi', names=('t', 'r', 'th', 'ph',)); (t, r, th, ph,) = c_spher._first_ngens(4)
# Definir la función a(t)
f = function('f')(r)

# Definir la métrica g de FRW
g = M.metric('g')
g[_sage_const_1 ,_sage_const_1 ] = -f
g[_sage_const_2 ,_sage_const_2 ] = _sage_const_1 /f
g[_sage_const_3 ,_sage_const_3 ] = r**_sage_const_2 
g[_sage_const_4 ,_sage_const_4 ] = r**_sage_const_2  * sin(th)**_sage_const_2 
nabla = g.connection()
ginv = g.inverse()
print(f'Metrica contravariante: {ginv}\n')

riem = g.riemann()
riem_disp = riem.display_comp(c_spher.frame(), c_spher, only_nonredundant=True)

print('Tensor de Rieman Metodo Sage \n')
print(riem_disp)
print('\n')
print(latex(riem_disp))
print('\n')


# Con la definicion de la clase 
print('Tensor de Rieman Metodo Tarea \n')
chris_symbols = g.christoffel_symbols_display(chart=c_spher)
print(f'Simbolos de Christoffel: {chris_symbols}\n')
#riem = nabla(chris_symbols)
#print(riem)
ricci = riem["^s_msn"]
#print(ricci)
print(f'R_mn = {latex(ricci[:])}\n')
print('\nEscalar de Ricci\n')
ricciinv = ginv["^mr"]*(ginv["^ns"]*ricci["_rs"])["_r^n"]
print(ricciinv)
ricci_scalar = g["_mn"]*ricciinv["^mn"]
print(f'R = {latex(ricci_scalar.display())}')



