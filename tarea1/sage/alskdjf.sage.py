

# This file was *autogenerated* from the file alskdjf.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3)
g = matrix(QQ, [[-_sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 ],
                [ _sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 ],
                [ _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 ],
                [ _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 ]])

# Define the tensor X^μ_ν
X = matrix(QQ, [[_sage_const_2 , _sage_const_0 , _sage_const_1 , -_sage_const_1 ],
                [-_sage_const_1 , _sage_const_0 , _sage_const_3 , _sage_const_2 ],
                [-_sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_0 ],
                [-_sage_const_2 , _sage_const_1 , _sage_const_1 , -_sage_const_2 ]])

# Define the vector V^μ
V = vector(QQ, [-_sage_const_1 , _sage_const_2 , _sage_const_0 , -_sage_const_2 ])

# (a) Compute X^μ_ν
X_mu_nu = X

# (b) Compute X_μ^ν (transpose of X^μ_ν)
X_nu_mu = X.transpose()

# (c) Compute X_(μν) (symmetrized tensor)
X_sym = (X + X.transpose()) / _sage_const_2 

# (d) Compute X_[μν] (antisymmetrized tensor)
X_antisym = (X - X.transpose()) / _sage_const_2 

# (e) Compute X^λ_λ (trace of the tensor)
trace_X = X.trace()

# (f) Compute V^μ V_μ (dot product of V with itself)
V_dot_product = V * V

# (g) Compute V_μ X^μν (contraction of V with the tensor X)
V_mu_X_munu = V * X

# Output the results
print("X^μ_ν:")
print(latex(X_mu_nu))
print("\nX_μ^ν:")
print(latex(X_nu_mu))
print("\nX_(μν):")
print(latex(X_sym))
print("\nX_[μν]:")
print(latex(X_antisym))
print("\nX^λ_λ:")
print(latex(trace_X))
print("\nV^μ V_μ:")
print(latex(V_dot_product))
print("\nV_μ X^μν:")
print(latex(V_mu_X_munu))


